!include("common_events.scr")

RaytraceEventPlaces(0)

EncounterManagerMapSettings()
{
	PointsModyfier("Reputation", 1.0)
	PointsModyfier("Status", 1.0)
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//EVENTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Event("ZombieMission")
{
    Type("ZOMBIE_MISSION")
    
    Category("Frequency")
    
    // Time btw event randomize [s]
    TimeBtw(0.)		

    // Probability of the event will draw in [%]    
    Probability(100.)
    
    // These missions should only start if there is a Zombie Player in the session.
    ReqPlayerZombieInSession()
    
    // This mission stays active when a zombie player is present
    ActiveWhenZombiePlayerPresent()
    
    // allow this mission to start when you are in a night pursuit
    ActiveDuringNightPursuit()   

    // The actions used by this Event.
    Action()
    {
        ZombieMission()
        {
            // [Optional] Use special logic when respawning the Human players after death.
            // Currently, enabling this means that Humans will respawn near where the host was standing when
            // the Zombie Mission started.
            // Leaving it disable means humans will choose respawn positions based on the regular
            // game logic (eg. the closest one to where they died).
            //OverrideHumanRespawn()
            
            // [Optional] Use special logic when respawning the Zombie players after death.
            // Currently, the standard spawning logic has been updated to do what the zombie wants, so this
            // should not be needed anymore.
            //OverrideZombieRespawn()

            // When players respawn we place an object (flare) at their feet to create a temporary safe zone
            // This sets the name of the object to place
            ItemSpawnedOnHumanRespawn("Throwable_Btz_Flare")
            
            // [Required] What rewards we give to the human players when succesfully completing a btz mission.
            // [s] What loot pool do we pull out of for our platinum weapon rewards
            // [s] What loot pool do we pull out of for our first reward
            // [f] Probability of awarding first reward.
            // [s] What loot pool do we pull out of for our second reward
            // [f] Probability of awarding second reward.
            // [f] Theres a probability that the second reward will be a craft plan instead of a weapon.
            // [s] The crafting part to award humans if they win (or if its their first match).
            // [s] The crafting plan to award humans at the end of the match.  
            // [i] players must reach this status level before they are allowed to get platinum weapons           
            SetHumanRewardParams("BTZRewardPlatinum", "BTZReward", 0.28, 0.18, "BTZReward", 0.0, 0.25, "Craftplan_GhulPotion", "Craft_HunterGland", 25)
            
            // [Optional] How many platinum awards to give at what display rank.
            HumanPlatinumRewardLevel(3,1)
            HumanPlatinumRewardLevel(6,2)
            HumanPlatinumRewardLevel(11,3)
                                    
            // [Required] What chatters to play to humans when hunter is invading.
            // [s] The chatter group to play when the humans first get invaded by hunter.
            // [s] The chatter group to play when the humans get invaded by hunter (after the first time).
            // [f] The amount of time we want to delay the chatter by.
            // [f] The time we can spend attempting to play intro chatter.
            HumanIntroChatters("NightHunterFirstInvasionAYO","NightHunterSubsequentInvasionAYO", 5.0, 300.0)
            
            // [Required] Information about how many lives the human team has.
            // [i] Number of lives.
            SetNumberOfLivesParams(10)
            
            // [Required] Information about how much time to give the humans before the game starts.
            // [f] Pre countdown time. This timer is counting down as the zombie is loading the level, the number represents the min time we give the humans in the case that the zombie does not have to load anything.
            // [f] Countdown time. This coundown will show up on the screen and starts once the zombie has loaded the level and the min pre countdown time has been reached.
            // (5.0, 10.0)
            SetPreGameTime(20, 3.0)

            // [Required] Defines how to search for Hives.
            // NOTE: Penalty values are in relation to "max_deviation". eg. A penalty of 1 on a hive of perfect distance would have the same score as a hive with no penalty at "max_devation" dist.             
             HiveSearchParams(
                    0.0,    // ideal_dist_min [f] smallest ideal distance for a hive that rubberbanding can make
                    600.0,    // ideal_dist_max [f] largest ideal distance for a hive that rubberbanding can make
                    325.0,  // ideal_dist [f] When searching for new locations, this is the ideal distance we would like to have. 1v1
                    400.0,  // ideal_dist [f] When searching for new locations, this is the ideal distance we would like to have. 2v1
                    500.0,  // ideal_dist [f] When searching for new locations, this is the ideal distance we would like to have. 3v1
                    600.0,  // ideal_dist [f] When searching for new locations, this is the ideal distance we would like to have. 4v1
                    20.0,   // max_deviation [f] When searching for a new hive, this is the max distance from the ideal dist a hive can be with out having a "too_close/too_far" penalty applied to it 
                    325.0,   // min_dist_to_player [f] When searching for a new hive, this is the minimum distance we would like a hive to spawn at from the player, if close it will get the "too close" penalty       
                    50.0,  // too_close [f] penalty to apply when it is closer then the "max from ideal"      
                    5.0,    // too_far [f] penalty to apply when it is farther then the "max from ideal"      
                    1.5,    // non_preferred_penalty [f] penalty to apply when not on the preferred connection list
                    3.0,    // undesirable_penalty [f] penalty to apply when on the undesirable connection list
                    0.20,  // dist_weighting [f] how important distance is in the overall difficulty of a hive (if set to 1, ever increment of "max_deviation" will count as one less life for humans)                   
                    -100.0,   // lives_behind_for_easiest_hive [f] The amount of lives behind for us to pick a easy hive ( dist_weighting will be part of the equation for # of lives)
                    100.0,  // lives_ahead_for_hardest_hive [f] The amount of lives ahead the humans need to be for us to pick a hard hive ( dist_weighting will be part of the equation for # of lives)
                    -100.0,   // lives_behind_for_easiest_rubberband [f] The amount of lives behind the humans need to be for us to reach the easiest rubberbanding setting  
                    100.0,  // lives_ahead_for_hardest_rubberband [f] The amount of lives ahead the humans need to be for us to reach the hardest rubberbanding setting    
                    1.0)    // rand [f] A value to add randomness to the picking of the hives. 1.0 would be  a full difficulty value of randomness.

					
            
            // [Required] Sets up params for how to handle disconnections that end the mission
            // [i] How many hives have to be destroyed before automatically awarding the rest if the zombie player disconnects
            // [f] Max time remaining to give zombie player the win if all human players disconnect              
            SetDisconnectionParams(3, 60) 
            
            // [f] If it is not night when we start the mission then we will interpolate to night over this amount of time.
            SetDayPhaseTransitionTime(10)
            
            // [f] Time in seconds that humans can spend in safe zones before the game warns them they will forfeit soon.
            // [f] Time in seconds that humans can spend in safe zones before they forfeit the game.
            SetHumanSafeZoneTimes(-1, -1)
            
            // [f] Time in seconds that humans can spend in water before the game warns them they will forfeit soon.
            // [f] Time in seconds that humans can spend in water before they forfeit the game.
            SetHumanWaterTimes(-1, -1)

            // [f] Time in seconds that humans can spend in safe zones or in water before the game warns them they will forfeit soon.
            // [f] Time in seconds that humans can spend in safe zones or in water before they forfeit the game.
            SetHumanSafeZoneOrWaterTimes(90, 150)
            
            // [f] time in seconds to be afk before you forfeit the match
            SetHumanAfkForfeitTime(90)
            
             // [f] the game is forfeited if human players do not damage the player or ai for this length of time
            SetHumanNoInteractionkForfeitTime(300)
            
            // [i] Times to show the intro movie for humans 
            // [i] Times to show the intro movie for hunters
            TimesToShowIntroMovie(0, 0)
            
             //[f] how much to increase hunters normal loco speed by
            SetHunterRopeLocoSpeedIncrease(0.0)
            
            //[f] how much velocity he loses after releasing ropeloco when holding forward on the stick
            SetHunterRopeLocoMinDeceleration(0.0)
            
            // add an invalid area, meaning game will time out and humans will loose if the stay in it- points need to be added clockwise in order
            InvalidArea()
            {
                AddPoint(-490.83, 61.10, 0.26)
                AddPoint(-381.87, 89.56, -55.64)
                AddPoint(-208.21, 108.49, -60.43)
                AddPoint(-244.84, 127.54, 277.77)
                SetHeight(200)
            }
            
            // because players get locked into the dam, disable invasions when they are in this area
            DisableInvasionAreas()
            {
                AddPoint(1108.54, 10.0, 536.66)
                AddPoint(1038.70, 10.0, 544.91)
                AddPoint(1050.8, 10.0, 451.47)
                AddPoint(1049.15, 10.0, 380.97)
                AddPoint(1092.64, 10.0, 380.54)
                SetHeight(26)
            }
        }
    }
}

Event("AirDrop_Wasteland")
{
	Type("AIR_DROP")

	Category("Time")
	DayTimeCondition(9.95)    // godzina wystepowania - uwaga po kropce nie sa minuty tylko ulamek godziny tzn 19:15 powinna byc zapisana jako 19.25
//	DayTimeCondition(11.95) // wylaczone po skroceniu dnia do pol godziny
	DayTimeCondition(15.95)
//	DayTimeCondition(17.95) // wylaczone po skroceniu dnia do pol godziny

	DayTimeCondition(23.30)

// 	Category("Frequency")
// 	TimeBtw(500.)			    // time btw event radnomize [s]
// 	Probability(50.)			// prawdopodobienstwo ze wylosuje sie event [%]

	CreatePlace("Air_Drop_Place")
	{
		//Condition("place of discharge", 0.5)
		Condition("air drop", 1.)
		IncludePrevInSuitabilityValue(0)
		DistanceFrom("Player", 400., 300., 500.)				//optymalna odleglosc od innego punktu - nazwa "Player" uzywana do okreslenia aktualnej pozycji gracza
	}

	CreatePlace("Punk_Hideout_Place")
	{
		Condition("hideout", 1.)

		DistanceFrom("Air_Drop_Place", 100., 0., 300.)			//optymalna odleglosc od innego punktu
	}

	Action()
	{
		AirDrop()
		{
			UsePlace("Air_Drop_Place")
			
			PlaneMeshAndSound("ve_hercules_a.msh", "airplane_hercules_passing.wav", 16.)
			ParcelMesh("military_cargo_a.msh")
			
			ParachuteMesh("ve_parachute_a.msh")
			ParachuteLandingAnim("landing")
			ParachuteDropStartAnim("drop_seq")
			DistToMugging(30.) 		//dystans do ograbienia skrzyni ( jesli gracz bedzie powyzej tego dystansu to skrzynia zostanie ograbiona )
			TimeOfMugging(120.) 	// czas po jakim patrol i skrzynki zniknie jak user nie podejdzie na odlegloscia DistToMugging
			DistOfPatrolSpawn(75.)	// Dystans przy ktorym wyspawnujemy patrol 
			PlayerAvgSpeed(9.)
			
			TrayMesh("military_cargo_b.msh")
			ItemContinerMesh("military_box_a.msh", "AirDropBox", [0.488892, 0.211380, 0.234924],   [0.000000, 53.000015, 0.000000])
			ItemContinerMesh("military_box_a.msh", "AirDropBox", [-0.167236, 0.659706, -0.230927], [-0.971390, -36.217014, 30.917274])
			ItemContinerMesh("military_box_a.msh", "AirDropBox", [1.760803, 0.097336, 0.467224],   [79.633415, 68.637077, -78.961716])
			
			NoItems(1, 3)  //liczba przedmiotow ktore maja sie pojawic
			
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Event("PrimeNightEvent")
{
	Type("PRIME_NIGHT")
	Category("Place")
	Probability(0.0)
	TimeBtw(0.)
	SpawnDayPhase("DAY")
    DayPhaseBegin("morning")
	DayPhaseEnd("night_is_comming")

	Action()
	{
		PrimeNight()
		{
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//GROUPS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EventsGroup("Zombie_Events")
{
    AddEvent("ZombieMission")      
    Exclusive()				// Only one of these type of events can be running at the same time.
}

EventsGroup("Disabled_Events")
{
	BlockGroup()
	AddEvent("AirDrop")
}

EventsGroup("Air_Events")
{
	AddEvent("AirDrop_Wasteland")
	Exclusive() 
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//RESOURCES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

